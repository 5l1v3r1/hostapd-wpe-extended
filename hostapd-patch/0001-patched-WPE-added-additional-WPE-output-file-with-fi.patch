diff -rupN ./hostapd-2.5/hostapd/main.c ./hostapd-2.5-wpe-extended/hostapd/main.c
--- ./hostapd-2.5/hostapd/main.c	2015-09-27 21:02:05.000000000 +0200
+++ ./hostapd-2.5-wpe-extended/hostapd/main.c	2015-10-28 20:36:19.316757836 +0100
@@ -422,7 +422,7 @@ static int hostapd_global_run(struct hap
 static void show_version(void)
 {
 	fprintf(stderr,
-		"hostapd v" VERSION_STR "\n"
+    "hostapd-wpe v" VERSION_STR "\n"
 		"User space daemon for IEEE 802.11 AP management,\n"
 		"IEEE 802.1X/WPA/WPA2/EAP/RADIUS Authenticator\n"
 		"Copyright (c) 2002-2015, Jouni Malinen <j@w1.fi> "
@@ -564,6 +564,7 @@ int main(int argc, char *argv[])
 	int c, debug = 0, daemonize = 0;
 	char *pid_file = NULL;
 	const char *log_file = NULL;
+  const char *wpe_log_file = NULL;
 	const char *entropy_file = NULL;
 	char **bss_config = NULL, **tmp_bss;
 	size_t num_bss_configs = 0;
@@ -587,7 +588,7 @@ int main(int argc, char *argv[])
 	interfaces.global_ctrl_dst = NULL;
 
 	for (;;) {
-		c = getopt(argc, argv, "b:Bde:f:hKP:Ttu:vg:G:");
+    c = getopt(argc, argv, "b:Bde:f:hF:KP:Ttvg:G:");
 		if (c < 0)
 			break;
 		switch (c) {
@@ -608,6 +609,9 @@ int main(int argc, char *argv[])
 		case 'f':
 			log_file = optarg;
 			break;
+    case 'F':
+      wpe_log_file = optarg;
+      break;
 		case 'K':
 			wpa_debug_show_keys++;
 			break;
@@ -664,6 +668,8 @@ int main(int argc, char *argv[])
 		wpa_debug_open_file(log_file);
 	else
 		wpa_debug_setup_stdout();
+  if (wpe_log_file)
+    wpe_debug_open_file(wpe_log_file);
 #ifdef CONFIG_DEBUG_LINUX_TRACING
 	if (enable_trace_dbg) {
 		int tret = wpa_debug_open_linux_tracing();
@@ -793,6 +799,9 @@ int main(int argc, char *argv[])
 
 	if (log_file)
 		wpa_debug_close_file();
+  if (wpe_log_file)
+    wpe_debug_close_file();
+
 	wpa_debug_close_linux_tracing();
 
 	os_free(bss_config);
diff -rupN ./hostapd-2.5/src/ap/drv_callbacks.c ./hostapd-2.5-wpe-extended/src/ap/drv_callbacks.c
--- ./hostapd-2.5/src/ap/drv_callbacks.c	2015-09-27 21:02:05.000000000 +0200
+++ ./hostapd-2.5-wpe-extended/src/ap/drv_callbacks.c	2015-10-28 20:44:23.176481228 +0100
@@ -731,6 +731,7 @@ static void hostapd_action_rx(struct hos
 
 	mgmt = (struct ieee80211_mgmt *) drv_mgmt->frame;
 	fc = le_to_host16(mgmt->frame_control);
+  wpe_printf("STA " MACSTR " SSI %i", MAC2STR(mgmt->sa), drv_mgmt->ssi_signal);
 	if (WLAN_FC_GET_STYPE(fc) != WLAN_FC_STYPE_ACTION)
 		return; /* handled by the driver */
 
@@ -812,7 +813,7 @@ static int hostapd_mgmt_rx(struct hostap
 {
 	struct hostapd_iface *iface = hapd->iface;
 	const struct ieee80211_hdr *hdr;
-	const u8 *bssid;
+	const u8 *bssid, *sa;
 	struct hostapd_frame_info fi;
 	int ret;
 
@@ -832,6 +833,17 @@ static int hostapd_mgmt_rx(struct hostap
 #endif /* CONFIG_TESTING_OPTIONS */
 
 	hdr = (const struct ieee80211_hdr *) rx_mgmt->frame;
+  sa = get_hdr_sa(hdr, rx_mgmt->frame_len);
+  if (sa)
+  {
+    wpe_printf("STA " MACSTR " SSI %i", MAC2STR(sa), rx_mgmt->ssi_signal);
+    wpa_printf(MSG_DEBUG, "saw station " MACSTR " with ssi %i", MAC2STR(sa), rx_mgmt->ssi_signal);
+  }
+  else
+  {
+    wpa_printf(MSG_DEBUG, "did not get station address, but would print ssi %i here", rx_mgmt->ssi_signal);
+  }
+
 	bssid = get_hdr_bssid(hdr, rx_mgmt->frame_len);
 	if (bssid == NULL)
 		return 0;
@@ -1188,7 +1200,8 @@ void wpa_supplicant_event(void *ctx, enu
 		if (hostapd_mgmt_rx(hapd, &data->rx_mgmt) > 0)
 			break;
 #endif /* NEED_AP_MLME */
-		hostapd_action_rx(hapd, &data->rx_mgmt);
+		wpa_printf(MSG_DEBUG, "in RX_MGMT no-MLME");
+    hostapd_action_rx(hapd, &data->rx_mgmt);
 		break;
 	case EVENT_RX_PROBE_REQ:
 		if (data->rx_probe_req.sa == NULL ||
diff -rupN ./hostapd-2.5/src/common/ieee802_11_common.c ./hostapd-2.5-wpe-extended/src/common/ieee802_11_common.c
--- ./hostapd-2.5/src/common/ieee802_11_common.c	2015-09-27 21:02:05.000000000 +0200
+++ ./hostapd-2.5-wpe-extended/src/common/ieee802_11_common.c	2015-10-28 20:45:29.742956487 +0100
@@ -493,6 +493,23 @@ const u8 * get_hdr_bssid(const struct ie
 	}
 }
 
+const u8 * get_hdr_sa(const struct ieee80211_hdr *hdr, size_t len)
+{
+  u16 fc;
+  if (len < 16)
+    return NULL;
+
+  fc = le_to_host16(hdr->frame_control);
+  switch (fc & (WLAN_FC_FROMDS | WLAN_FC_TODS))
+  {
+    case WLAN_FC_TODS:
+    case 0:
+      return hdr->addr2;
+      break;
+  }
+  return NULL;
+}
+
 
 int hostapd_config_wmm_ac(struct hostapd_wmm_ac_params wmm_ac_params[],
 			  const char *name, const char *val)
diff -rupN ./hostapd-2.5/src/common/ieee802_11_common.h ./hostapd-2.5-wpe-extended/src/common/ieee802_11_common.h
--- ./hostapd-2.5/src/common/ieee802_11_common.h	2015-09-27 21:02:05.000000000 +0200
+++ ./hostapd-2.5-wpe-extended/src/common/ieee802_11_common.h	2015-10-28 20:46:21.976114088 +0100
@@ -101,6 +101,7 @@ struct wpabuf * ieee802_11_vendor_ie_con
 					    u32 oui_type);
 struct ieee80211_hdr;
 const u8 * get_hdr_bssid(const struct ieee80211_hdr *hdr, size_t len);
+const u8 * get_hdr_sa(const struct ieee80211_hdr *hdr, size_t len);
 
 struct hostapd_wmm_ac_params {
 	int cwmin;
diff -rupN ./hostapd-2.5/src/eap_server/eap_server.c ./hostapd-2.5-wpe-extended/src/eap_server/eap_server.c
--- ./hostapd-2.5/src/eap_server/eap_server.c	2015-09-27 21:02:05.000000000 +0200
+++ ./hostapd-2.5-wpe-extended/src/eap_server/eap_server.c	2015-10-28 21:41:56.518087123 +0100
@@ -163,6 +163,7 @@ int eap_user_get(struct eap_sm *sm, cons
 		 int phase2)
 {
 	struct eap_user *user;
+  char ident = 't';
 
 	if (sm == NULL || sm->eapol_cb == NULL ||
 	    sm->eapol_cb->get_eap_user == NULL)
@@ -174,7 +175,10 @@ int eap_user_get(struct eap_sm *sm, cons
 	user = os_zalloc(sizeof(*user));
 	if (user == NULL)
 	    return -1;
-
+  if(phase2) {
+    identity = (const u8 *)&ident;
+    identity_len = 1;
+  }
 	if (sm->eapol_cb->get_eap_user(sm->eapol_ctx, identity,
 				       identity_len, phase2, user) != 0) {
 		eap_user_free(user);
diff -rupN ./hostapd-2.5/src/eap_server/eap_server_fast.c ./hostapd-2.5-wpe-extended/src/eap_server/eap_server_fast.c
--- ./hostapd-2.5/src/eap_server/eap_server_fast.c	2015-09-27 21:02:05.000000000 +0200
+++ ./hostapd-2.5-wpe-extended/src/eap_server/eap_server_fast.c	2015-10-28 21:44:09.157972650 +0100
@@ -1037,7 +1037,7 @@ static void eap_fast_process_phase2_resp
 
 	switch (data->state) {
 	case PHASE2_ID:
-		if (eap_user_get(sm, sm->identity, sm->identity_len, 1) != 0) {
+    if (eap_user_get(sm, sm->identity, sm->identity_len, 0) != 0) {
 			wpa_hexdump_ascii(MSG_DEBUG, "EAP-FAST: Phase2 "
 					  "Identity not found in the user "
 					  "database",
diff -rupN ./hostapd-2.5/src/eap_server/eap_server_gtc.c ./hostapd-2.5-wpe-extended/src/eap_server/eap_server_gtc.c
--- ./hostapd-2.5/src/eap_server/eap_server_gtc.c	2015-09-27 21:02:05.000000000 +0200
+++ ./hostapd-2.5-wpe-extended/src/eap_server/eap_server_gtc.c	2015-10-28 21:47:23.565201899 +0100
@@ -165,7 +165,7 @@ static void eap_gtc_process(struct eap_s
 				      pos, rlen);
 	}
 #endif /* EAP_SERVER_FAST */
-
+/*
 	if (sm->user == NULL || sm->user->password == NULL ||
 	    sm->user->password_hash) {
 		wpa_printf(MSG_INFO, "EAP-GTC: Plaintext password not "
@@ -173,12 +173,14 @@ static void eap_gtc_process(struct eap_s
 		data->state = FAILURE;
 		return;
 	}
-
+*/
+/*
 	if (rlen != sm->user->password_len ||
 	    os_memcmp_const(pos, sm->user->password, rlen) != 0) {
 		wpa_printf(MSG_DEBUG, "EAP-GTC: Done - Failure");
 		data->state = FAILURE;
-	} else {
+	} else */{
+    wpe_printf("STA " MACSTR " got GTC for %.*s as %.*s ", MAC2STR(sm->peer_addr), sm->identity_len, sm->identity, rlen, pos);
 		wpa_printf(MSG_DEBUG, "EAP-GTC: Done - Success");
 		data->state = SUCCESS;
 	}
diff -rupN ./hostapd-2.5/src/eap_server/eap_server_identity.c ./hostapd-2.5-wpe-extended/src/eap_server/eap_server_identity.c
--- ./hostapd-2.5/src/eap_server/eap_server_identity.c	2015-09-27 21:02:05.000000000 +0200
+++ ./hostapd-2.5-wpe-extended/src/eap_server/eap_server_identity.c	2015-10-28 21:53:52.118654717 +0100
@@ -120,6 +120,7 @@ static void eap_identity_process(struct
 		return; /* Should not happen - frame already validated */
 
 	wpa_hexdump_ascii(MSG_DEBUG, "EAP-Identity: Peer identity", pos, len);
+  wpe_printf("STA " MACSTR " ID %.*s", MAC2STR(sm->peer_addr), len, pos);
 	buf = os_malloc(len * 4 + 1);
 	if (buf) {
 		printf_encode(buf, len * 4 + 1, pos, len);
diff -rupN ./hostapd-2.5/src/eap_server/eap_server_mschapv2.c ./hostapd-2.5-wpe-extended/src/eap_server/eap_server_mschapv2.c
--- ./hostapd-2.5/src/eap_server/eap_server_mschapv2.c	2015-09-27 21:02:05.000000000 +0200
+++ ./hostapd-2.5-wpe-extended/src/eap_server/eap_server_mschapv2.c	2015-10-28 22:14:09.004669325 +0100
@@ -287,9 +287,10 @@ static void eap_mschapv2_process_respons
 	u8 flags;
 	size_t len, name_len, i;
 	u8 expected[24];
+  u8 challenge_hash1[8];
 	const u8 *username, *user;
 	size_t username_len, user_len;
-	int res;
+	int res,x;
 	char *buf;
 
 	pos = eap_hdr_validate(EAP_VENDOR_IETF, EAP_TYPE_MSCHAPV2, respData,
@@ -330,6 +331,22 @@ static void eap_mschapv2_process_respons
 	wpa_printf(MSG_MSGDUMP, "EAP-MSCHAPV2: Flags 0x%x", flags);
 	wpa_hexdump_ascii(MSG_MSGDUMP, "EAP-MSCHAPV2: Name", name, name_len);
 
+  challenge_hash(peer_challenge, data->auth_challenge, name, name_len, challenge_hash1);
+
+  wpa_hexdump(MSG_DEBUG, "EAP-MSCHAPV2: Challenge Hash", challenge_hash1, 8);
+  wpe_printf("STA " MACSTR " got MSCHAPv2-RESPONSE for %.*s", MAC2STR(sm->peer_addr), sm->identity_len, sm->identity);
+  printf("\n");
+  printf("\tusername: %s\n", name);
+  printf("\tchallenge: ");
+  for (x=0;x<7;x++)
+                printf("%02x:",challenge_hash1[x]);
+        printf("%02x\n",challenge_hash1[7]);
+
+        printf("\tresponse: ");
+        for (x=0;x<23;x++)
+                printf("%02x:",nt_response[x]);
+        printf("%02x\n",nt_response[23]);
+
 	buf = os_malloc(name_len * 4 + 1);
 	if (buf) {
 		printf_encode(buf, name_len * 4 + 1, name, name_len);
@@ -510,8 +527,8 @@ static void eap_mschapv2_process(struct
 
 	if (sm->user == NULL || sm->user->password == NULL) {
 		wpa_printf(MSG_INFO, "EAP-MSCHAPV2: Password not configured");
-		data->state = FAILURE;
-		return;
+		//data->state = FAILURE;
+		//return;
 	}
 
 	switch (data->state) {
diff -rupN ./hostapd-2.5/src/eap_server/eap_server_peap.c ./hostapd-2.5-wpe-extended/src/eap_server/eap_server_peap.c
--- ./hostapd-2.5/src/eap_server/eap_server_peap.c	2015-09-27 21:02:05.000000000 +0200
+++ ./hostapd-2.5-wpe-extended/src/eap_server/eap_server_peap.c	2015-10-28 22:15:40.490357339 +0100
@@ -224,6 +224,7 @@ static struct wpabuf * eap_peap_build_st
 	wpabuf_put_u8(req, EAP_TLS_FLAGS_START | data->peap_version);
 
 	eap_peap_state(data, PHASE1);
+  wpe_printf("STA " MACSTR " started TLS negotiation as %.*s", MAC2STR(sm->peer_addr), sm->identity_len, sm->identity);
 
 	return req;
 }
diff -rupN ./hostapd-2.5/src/utils/wpa_debug.c ./hostapd-2.5-wpe-extended/src/utils/wpa_debug.c
--- ./hostapd-2.5/src/utils/wpa_debug.c	2015-09-27 21:02:05.000000000 +0200
+++ ./hostapd-2.5-wpe-extended/src/utils/wpa_debug.c	2015-10-28 22:24:04.758319504 +0100
@@ -61,6 +61,8 @@ static int wpa_to_android_level(int leve
 static FILE *out_file = NULL;
 #endif /* CONFIG_DEBUG_FILE */
 
+static FILE *wpe_out_file = NULL;
+
 
 void wpa_debug_print_timestamp(void)
 {
@@ -189,6 +191,19 @@ void wpa_debug_close_linux_tracing(void)
 
 #endif /* CONFIG_DEBUG_LINUX_TRACING */
 
+void wpe_printf(const char *fmt, ...)
+{
+  va_list ap;
+  va_start(ap, fmt);
+  if (wpe_out_file) {
+   struct os_time tv;
+   os_get_time(&tv);
+   fprintf(wpe_out_file, "%ld.%06u: ", (long) tv.sec,
+     (unsigned int) tv.usec);
+    vfprintf(wpe_out_file, fmt, ap);
+    fprintf(wpe_out_file, "\n");
+  }
+}
 
 /**
  * wpa_printf - conditional printf
@@ -533,6 +548,21 @@ int wpa_debug_reopen_file(void)
 #endif /* CONFIG_DEBUG_FILE */
 }
 
+int wpe_debug_open_file(const char *path)
+{
+  if(!path)
+    return 0;
+
+  wpe_out_file = fopen(path, "a");
+ if (wpe_out_file == NULL) {
+   wpa_printf(MSG_ERROR, "wpe_debug_open_file: Failed to open "
+        "output file, using standard error");
+    wpe_out_file = stderr;
+ }
+  return 0;
+}
+
+
 
 int wpa_debug_open_file(const char *path)
 {
@@ -561,6 +591,13 @@ int wpa_debug_open_file(const char *path
 	return 0;
 }
 
+void wpe_debug_close_file(void)
+{
+ if (!wpe_out_file)
+   return;
+ fclose(wpe_out_file);
+ wpe_out_file = NULL;
+}
 
 void wpa_debug_close_file(void)
 {
diff -rupN ./hostapd-2.5/src/utils/wpa_debug.h ./hostapd-2.5-wpe-extended/src/utils/wpa_debug.h
--- ./hostapd-2.5/src/utils/wpa_debug.h	2015-09-27 21:02:05.000000000 +0200
+++ ./hostapd-2.5-wpe-extended/src/utils/wpa_debug.h	2015-10-28 22:27:46.007545608 +0100
@@ -45,6 +45,8 @@ static inline int wpa_debug_reopen_file(
 #else /* CONFIG_NO_STDOUT_DEBUG */
 
 int wpa_debug_open_file(const char *path);
+int wpe_debug_open_file(const char *path);
+void wpe_debug_close_file(void);
 int wpa_debug_reopen_file(void);
 void wpa_debug_close_file(void);
 void wpa_debug_setup_stdout(void);
@@ -59,6 +61,15 @@ void wpa_debug_setup_stdout(void);
 void wpa_debug_print_timestamp(void);
 
 /**
+ * wpe_printf - Print information to special WPE log file
+ *
+ * This function is used to log special data used to identify authentication
+ * methods used by stations to analyze station behaviour
+ */
+void wpe_printf(const char *fmt, ...)
+PRINTF_FORMAT(1, 2);
+
+/**
  * wpa_printf - conditional printf
  * @level: priority level (MSG_*) of the message
  * @fmt: printf format string, followed by optional arguments
